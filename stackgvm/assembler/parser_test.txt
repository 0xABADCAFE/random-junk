Testing non commutative triple operand set
	Parsing '(0), (0), (1)' => Array
(
    [0] => Operand Object
        (
            [iKind] => 1
            [iValue] => 0
            [sSource] => (0)
        )

    [1] => Operand Object
        (
            [iKind] => 1
            [iValue] => 0
            [sSource] => (0)
        )

    [2] => Operand Object
        (
            [iKind] => 1
            [iValue] => 1
            [sSource] => (1)
        )

)
	Parsing '(i0 + 2), (0), (i1 + 2)' => Array
(
    [0] => Operand Object
        (
            [iKind] => 2
            [iValue] => 2
            [sSource] => (i0+2)
        )

    [1] => Operand Object
        (
            [iKind] => 1
            [iValue] => 0
            [sSource] => (0)
        )

    [2] => Operand Object
        (
            [iKind] => 3
            [iValue] => 2
            [sSource] => (i1+2)
        )

)
	Parsing '(i0 + 2), (3), (i1 + (5 + (7*2) ) )' => Array
(
    [0] => Operand Object
        (
            [iKind] => 2
            [iValue] => 2
            [sSource] => (i0+2)
        )

    [1] => Operand Object
        (
            [iKind] => 1
            [iValue] => 3
            [sSource] => (3)
        )

    [2] => Operand Object
        (
            [iKind] => 3
            [iValue] => 19
            [sSource] => (i1+(5+(7*2)))
        )

)
	Parsing '(i0 + 1), (i0 + 2), (i1 + 3)' => ParseException - Invalid Operand Use Case {2, 2, 3}
Testing two operand with 16-bit signed offset
	Parsing '(0), (0), #-32768' => Array
(
    [0] => Operand Object
        (
            [iKind] => 1
            [iValue] => 0
            [sSource] => (0)
        )

    [1] => Operand Object
        (
            [iKind] => 1
            [iValue] => 0
            [sSource] => (0)
        )

    [2] => Operand Object
        (
            [iKind] => 5
            [iValue] => -32768
            [sSource] => #-32768
        )

)
	Parsing '(i0 + 7), (100), #(1<<4)&((1<<15)-1)' => Array
(
    [0] => Operand Object
        (
            [iKind] => 2
            [iValue] => 7
            [sSource] => (i0+7)
        )

    [1] => Operand Object
        (
            [iKind] => 1
            [iValue] => 100
            [sSource] => (100)
        )

    [2] => Operand Object
        (
            [iKind] => 5
            [iValue] => 16
            [sSource] => #(1<<4)&((1<<15)-1)
        )

)
	Parsing '(i0 + 4%3), (1 < 2 ? 10 : 20), #0' => Array
(
    [0] => Operand Object
        (
            [iKind] => 2
            [iValue] => 1
            [sSource] => (i0+4%3)
        )

    [1] => Operand Object
        (
            [iKind] => 1
            [iValue] => 10
            [sSource] => (1<2?10:20)
        )

    [2] => Operand Object
        (
            [iKind] => 5
            [iValue] => 0
            [sSource] => #0
        )

)
